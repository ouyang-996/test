// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: msg.proto

package msg

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MsgService service

type MsgService interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error)
	Monming(ctx context.Context, in *MonmingRequest, opts ...client.CallOption) (*MonmingResponse, error)
}

type msgService struct {
	c    client.Client
	name string
}

func NewMsgService(name string, c client.Client) MsgService {
	return &msgService{
		c:    c,
		name: name,
	}
}

func (c *msgService) Hello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloResponse, error) {
	req := c.c.NewRequest(c.name, "MsgService.Hello", in)
	out := new(HelloResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgService) Monming(ctx context.Context, in *MonmingRequest, opts ...client.CallOption) (*MonmingResponse, error) {
	req := c.c.NewRequest(c.name, "MsgService.Monming", in)
	out := new(MonmingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MsgService service

type MsgServiceHandler interface {
	Hello(context.Context, *HelloRequest, *HelloResponse) error
	Monming(context.Context, *MonmingRequest, *MonmingResponse) error
}

func RegisterMsgServiceHandler(s server.Server, hdlr MsgServiceHandler, opts ...server.HandlerOption) error {
	type msgService interface {
		Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error
		Monming(ctx context.Context, in *MonmingRequest, out *MonmingResponse) error
	}
	type MsgService struct {
		msgService
	}
	h := &msgServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MsgService{h}, opts...))
}

type msgServiceHandler struct {
	MsgServiceHandler
}

func (h *msgServiceHandler) Hello(ctx context.Context, in *HelloRequest, out *HelloResponse) error {
	return h.MsgServiceHandler.Hello(ctx, in, out)
}

func (h *msgServiceHandler) Monming(ctx context.Context, in *MonmingRequest, out *MonmingResponse) error {
	return h.MsgServiceHandler.Monming(ctx, in, out)
}
